<#@ template hostspecific="True" language="C#" #>
<#@include file="Manager.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\ServiceStack.Text.dll" #>
<#@ assembly name="$(TargetDir)\ServiceStack.Interfaces.dll" #>

<#@ assembly name="System.Web.dll" #>
<#@ assembly name="$(TargetDir)\ServiceStack.CodeGenerator.TypeScript.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="ServiceStack" #> 
<#@ import namespace="System.Reflection" #> 
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="ServiceStack.CodeGenerator.TypeScript" #>
<#@output extension=".ts"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
    // Grab the routes to generate code for
    var routeTypes =
        AppDomain.CurrentDomain.GetAssemblies()
            //.Where(a => a.FullName.StartsWith("ServiceStack.CodeGenerator.TypeScript.Tests"))
            .SelectMany(
                a =>
                a.GetTypes()
                    .Where(t => 
                            t.Namespace == "ServiceStack.CodeGenerator.TypeScript.Tests" &&
                            t.CustomAttributes.Any(attr => attr.AttributeType == typeof(RouteAttribute))));


//    foreach (var t in routeTypes)
//        WriteLine("//" + t.Name);

    var cg = new TypescriptCodeGenerator(
            routeTypes, 
            "cv.cef.api",
            new string[]{"Clarity.Ecommerce.DataModel"},     // Array of namespaces to ignore when generating DTOs
                                                            // We added this because our DTOs in some cases included an entity type which we did not want to see propagated to our typescript
            "$cef"
            );        
        
    manager.StartNewFile("dtos.ts");
    WriteLine(cg.GenerateDtos());
    manager.EndBlock();

	manager.StartNewFile("routes.ts");
    WriteLine(cg.GenerateRoutes());
    manager.EndBlock();

    #>
///<reference path="_references.ts"/>

<#
    WriteLine(cg.GenerateClient());    
 #>
<# manager.Process(true); #>
<#+   
#>